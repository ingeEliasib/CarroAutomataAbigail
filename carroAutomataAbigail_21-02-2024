#include <Servo.h>

Servo miServo; 

const int Trigger = 12; // Pin del Trigger del sensor ultrasónico
const int Echo = 11;    // Pin del Echo del sensor ultrasónico
const int in1 = 10;     // Pin que controla el sentido de giro Motor B
const int in4 = 7;      // Pin que controla el sentido de giro Motor B
const int in2 = 9;      // Pin que controla el sentido de giro Motor A
const int in3 = 8;      // Pin que controla el sentido de giro Motor A

// Prototipos de las funciones
void detenerse();
void avanzar();
void retroceder();
void girarDerecha();
void girarIzquierda();
long distancia();
void determinarMovimiento();

void setup() {
  miServo.attach(4); // Inicializa el servo en el pin 4
  pinMode(Trigger, OUTPUT); // Inicializa el pin del Trigger como salida
  pinMode(Echo, INPUT);     // Inicializa el pin del Echo como entrada
  pinMode(in1, OUTPUT);     // Inicializa los pines del motor B como salidas
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);     // Inicializa los pines del motor A como salidas
  pinMode(in4, OUTPUT);
  Serial.begin(9600); // Inicializa la comunicación serial
}

void loop() {
  long distance = distancia();

  if (distance >= 30) {
    avanzar();
    delay(500);
   
  } else {
    delay(500);
    retroceder();
    delay(500);
    determinarMovimiento();
  }
}

// Función para detener el Arduino
void detenerse() {
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
}

// Función para avanzar
void avanzar() {
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW); // Llanta A hacia adelante
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH); // Llanta B hacia adelante
}

// Función para retroceder
void retroceder() {
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH); // Llanta A hacia atrás
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW); // Llanta B hacia atrás
}

// Función para girar a la derecha
void girarDerecha() {
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW); // Llanta A hacia adelante
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW); // Llanta B detenida
}

// Función para girar a la izquierda
void girarIzquierda() {
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW); // Llanta A detenida
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH); // Llanta B hacia adelante
}

// Función para medir la distancia con el sensor ultrasónico
long distancia() {
  digitalWrite(Trigger, LOW);
  delayMicroseconds(2);
  digitalWrite(Trigger, HIGH);
  delayMicroseconds(10);
  digitalWrite(Trigger, LOW);
  return pulseIn(Echo, HIGH) * 0.034 / 2; // Devuelve la distancia en centímetros
}

// Función para determinar el movimiento a realizar
void determinarMovimiento() {
  // Revisar distancia en ángulo 0
  delay(1000);
  miServo.write(0);
  delay(1000);
  long Dis0 = distancia();

  // Revisar distancia en ángulo 90
  miServo.write(90);
  delay(1000);
  long Dis90 = distancia();

  // Revisar distancia en ángulo 180
  miServo.write(180);
  delay(1000);
  long Dis180 = distancia();
  miServo.write(90);
  // Determinar el movimiento basado en las distancias medidas
  if (Dis0 > Dis90) {
    if (Dis0 > Dis180) {
      
      girarIzquierda();
    } else {
      
      girarDerecha();
    }
  } else if (Dis90 > Dis180) {
   
    girarDerecha();
    delay(500);
    girarDerecha();
  } else {
    
    girarIzquierda();
  }
  
  
}
